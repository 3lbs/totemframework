/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package totem.structures.maps{	import totem.structures.ICollection;
		/**	 * IMap Interface	 */	public interface IMap extends ICollection	{		//-----------------------------------------------------------------------------------------		// Query Operations		//-----------------------------------------------------------------------------------------				/**		 * Checks if the map contains the specified key.		 * 		 * @param key The key to check for existence in the map.		 * @return true if the key was found, false if not.		 */		function containsKey(key:*):Boolean;						/**		 * Returns the value that is mapped with the specified key or null if the		 * key was not found in the map.		 * 		 * @param key The key under that the value is stored.		 * @return The value or null.		 */		function getValue(key:*):*;						//-----------------------------------------------------------------------------------------		// Modification Operations		//-----------------------------------------------------------------------------------------				/**		 * Puts a key-value pair into the map. The specified key must be unique		 * and not null for the value to be successfully stored.		 * 		 * @param key The key under which to store the value.		 * @param value The value to store in the map.		 * @return true if the key-value pair was successfully stored, else false.		 */		function put(key:*, value:*):Boolean;	}}