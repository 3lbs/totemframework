/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package totem.structures.arrays{	import totem.structures.IIterator;
		/**s	 * An iterator for array-based data structures.	 */	public class ArrayIterator implements IIterator	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _array:Array;		/** @private */		protected var _index:int;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new ArrayIterator instance.		 * 		 * @param array The array to iterate over.		 * @throws com.hexagonstar.exception.IllegalArgumentException if the specified array		 *             is null.		 */		public function ArrayIterator(array:Array)		{			if (!array)			{				throw new Error("[ArrayIterator] Argument 'array' is null.");			}						_array = array;			reset();		}						/**		 * Resets the iterator to its default index. After this operation returns the		 * iterated elements start from the beginning again as if the iterator has been		 * started for the first time.		 */		public function reset():void		{			_index = -1;		}						/**		 * Removes the element last returned by the iterator from the underlying array. This		 * method can be called only once per using the next property. The behavior of an		 * iterator is unspecified if the underlying array is modified while the iteration		 * is in progress in any way other than by calling this method.		 * 		 * @return The removed element.		 * @throws com.hexagonstar.exception.IllegalStateException if the <code>next</code>		 *             property has not yet been called, or the <code>remove()</code> method		 *             has been called again after the last call to the <code>next</code>		 *             property.		 */		public function remove():*		{			if (_index < 0)			{				throw new Error("[ArrayIterator]"				+ " Tried to remove an element from the array before fetching the 'next' property."				+ " There is thus no element selected to remove.");				return null;			}			return _array.splice(_index--, 1)[0];		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Checks whether the iteration has more elements to iterate over. In other words,		 * returns <code>true</code> if <code>next</code> would return an element rather		 * than throwing an exception.		 * 		 * @return <code>true</code> if the iterator has more elements.		 */		public function get hasNext():Boolean		{			return (_index < _array.length - 1);		}						/**		 * Returns the next element in the iteration. Using this property repeatedly until		 * the hasNext() method returns <code>false</code> will return each element in the		 * underlying array exactly once.		 * 		 * @return The next element in the iteration.		 * @throws com.hexagonstar.exception.data.NoSuchElementException if the iteration		 *             has no more elements to iterate over.		 */		public function get next():*		{			if (!(_index < _array.length - 1))			{				throw new Error("[ArrayIterator]"					+ " There is no next element in the array to iterate over.");				return undefined;			}			return _array[++_index];		}	}}