package totem.structures{	import flash.utils.getQualifiedClassName;		/**	 * The base class for most collection types.	 */	public class AbstractCollection	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _size:int;						//-----------------------------------------------------------------------------------------		// Query Operations		//-----------------------------------------------------------------------------------------				/**		 * The number of elements that the collection contains.		 * 		 * @return The number of elements that the collection contains.		 */		public function get size():int		{			return _size;		}						/**		 * Determines if the collection is empty or not. If true is returned, the collection		 * is empty, if false is returned, the collection contains any number of elements.		 * 		 * @return true If the collection contains no elements, otherwise false.		 */		public function get isEmpty():Boolean		{			return (_size < 1);		}						/**		 * Determines if the collection contains the specified element.		 * 		 * @return true if the element is contained in the collection, false if not.		 */		public function contains(element:*):Boolean		{			/* Abstract method! */			return false;		}						/**		 * Returns a string representation of the Class. Optionally a number of arguments		 * can be specified, typically class properties that are output together with the		 * class name to provide additional information about the class.		 * 		 * @example		 * <pre>		 *    // overriden toString method to include a size property:		 *    override public function toString(...args):String		 *    {		 *        return super.toString("size=" + size);		 *    }		 * </pre>		 * 		 * @param args an optional, comma-delimited list of class properties that should be		 *            output together with the class name.		 * @return A string representation of the class.		 */		public function toString(...args):String		{			var s:String = "";			for each (var i:String in args) s += ", " + i;			return "[" + getQualifiedClassName(this).match("[^:]*$")[0] + s + "]";		}						//-----------------------------------------------------------------------------------------		// Bulk Operations		//-----------------------------------------------------------------------------------------				/**		 * Checks whether the collection contains all of the elements that are in the		 * specified collection and returns true if all of the elements are found or false		 * if any elements are missing.		 * 		 * @param collection The collection with elements to be checked for containment in		 *            this collection.		 * @return true If the collection contains all of the elements in the specified		 *         collection, otherwise false.		 * @throws com.hexagonstar.exception.NullReferenceException if the specified		 *             collection is null.		 * @throws com.hexagonstar.exception.UnsupportedOperationException if this method is		 *             not supported by the collection.		 */		public function containsAll(collection:ICollection):Boolean		{			if (collection)			{				var i:IIterator = collection.iterator;				while (i.hasNext)				{					if (!contains(i.next)) return false;				}				return true;			}			else			{				return throwNullReferenceException();			}		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * throws a NullReference Exception.		 * @private		 */		protected function throwNullReferenceException():Boolean		{			throw new Error(toString() + " The specified collection is null!");			return false;		}	}}